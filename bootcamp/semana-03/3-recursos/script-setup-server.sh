#!/bin/bash

# ============================================================================
# Script de Configuraci√≥n Autom√°tica de Servidor Ubuntu
# ============================================================================
#
# ¬øQu√©? - Script que configura servidor Ubuntu para despliegue de aplicaciones
# ¬øPara qu√©? - Automatizar instalaci√≥n de Docker, firewall y configuraci√≥n b√°sica
# ¬øC√≥mo? - Ejecutar: sudo bash script-setup-server.sh
#
# Autor: Bootcamp Implantaci√≥n - SENA CGMLTI
# Versi√≥n: 1.0
# √öltima actualizaci√≥n: 2025-10-06
#
# ============================================================================

set -e  # Detener en caso de error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funciones de utilidad
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Banner
echo ""
echo "============================================"
echo "  üöÄ Setup Servidor Ubuntu para Docker"
echo "============================================"
echo ""

# Verificar que se ejecuta como root
if [ "$EUID" -ne 0 ]; then 
    log_error "Este script debe ejecutarse como root (usa sudo)"
    exit 1
fi

log_info "Iniciando configuraci√≥n del servidor..."
echo ""

# ============================================================================
# 1. ACTUALIZAR SISTEMA
# ============================================================================
log_info "Paso 1/6: Actualizando sistema operativo..."

# ¬øQu√©? - Actualizar lista de paquetes disponibles
# ¬øPara qu√©? - Obtener informaci√≥n de √∫ltimas versiones
apt update -qq

log_success "Lista de paquetes actualizada"

# ¬øQu√©? - Actualizar paquetes instalados
# ¬øPara qu√©? - Aplicar parches de seguridad
log_info "Instalando actualizaciones (puede tardar 2-3 minutos)..."
DEBIAN_FRONTEND=noninteractive apt upgrade -y -qq

log_success "Sistema actualizado"
echo ""

# ============================================================================
# 2. INSTALAR DEPENDENCIAS
# ============================================================================
log_info "Paso 2/6: Instalando herramientas b√°sicas..."

# ¬øQu√©? - Instalar paquetes esenciales
# ¬øPara qu√©? - Herramientas necesarias para administraci√≥n
apt install -y -qq \
    curl \
    wget \
    git \
    nano \
    htop \
    net-tools \
    ca-certificates \
    gnupg \
    lsb-release

log_success "Herramientas b√°sicas instaladas"
echo ""

# ============================================================================
# 3. INSTALAR DOCKER
# ============================================================================
log_info "Paso 3/6: Instalando Docker..."

# ¬øQu√©? - Descargar script oficial de instalaci√≥n de Docker
# ¬øPara qu√©? - M√©todo recomendado por Docker Inc.
if [ ! -f get-docker.sh ]; then
    curl -fsSL https://get.docker.com -o get-docker.sh
fi

# ¬øQu√©? - Ejecutar script de instalaci√≥n
# ¬øPara qu√©? - Instalar Docker Engine + Docker Compose v2
sh get-docker.sh > /dev/null 2>&1

# ¬øQu√©? - Limpiar archivo descargado
rm get-docker.sh

log_success "Docker instalado correctamente"

# Verificar versi√≥n
DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
log_info "Docker versi√≥n: $DOCKER_VERSION"

COMPOSE_VERSION=$(docker compose version | cut -d' ' -f4)
log_info "Docker Compose versi√≥n: $COMPOSE_VERSION"

# ¬øQu√©? - Habilitar Docker para que inicie con el sistema
# ¬øPara qu√©? - Contenedores arrancan autom√°ticamente tras reinicio
systemctl enable docker > /dev/null 2>&1

log_success "Docker habilitado al inicio"
echo ""

# ============================================================================
# 4. CONFIGURAR USUARIO NO-ROOT
# ============================================================================
log_info "Paso 4/6: Configurando usuarios..."

# ¬øQu√©? - Obtener usuario que invoc√≥ sudo
# ¬øPara qu√©? - Agregar permisos de Docker al usuario real
REAL_USER=${SUDO_USER:-$USER}

if [ "$REAL_USER" != "root" ]; then
    # ¬øQu√©? - Agregar usuario al grupo docker
    # ¬øPara qu√©? - Permitir ejecutar docker sin sudo
    usermod -aG docker "$REAL_USER"
    log_success "Usuario '$REAL_USER' agregado al grupo docker"
    log_warning "Cierra sesi√≥n y vuelve a conectar para aplicar cambios"
else
    log_warning "Ejecutado como root - considera crear usuario no-root"
fi

# ¬øQu√©? - Crear usuario 'deploy' si no existe
# ¬øPara qu√©? - Usuario dedicado para despliegues (opcional)
if ! id "deploy" &>/dev/null; then
    log_info "¬øDeseas crear usuario 'deploy'? (y/n)"
    read -r CREATE_DEPLOY
    
    if [ "$CREATE_DEPLOY" = "y" ]; then
        adduser --disabled-password --gecos "" deploy
        usermod -aG sudo,docker deploy
        log_success "Usuario 'deploy' creado (recuerda configurar contrase√±a)"
    fi
fi

echo ""

# ============================================================================
# 5. CONFIGURAR FIREWALL (UFW)
# ============================================================================
log_info "Paso 5/6: Configurando firewall (UFW)..."

# ¬øQu√©? - Instalar UFW si no est√°
if ! command -v ufw &> /dev/null; then
    apt install -y -qq ufw
fi

# ¬øQu√©? - Permitir SSH (puerto 22)
# ¬øPara qu√©? - Mantener acceso remoto
ufw allow 22/tcp > /dev/null 2>&1
log_success "Puerto 22 (SSH) permitido"

# ¬øQu√©? - Permitir HTTP (puerto 80)
ufw allow 80/tcp > /dev/null 2>&1
log_success "Puerto 80 (HTTP) permitido"

# ¬øQu√©? - Permitir HTTPS (puerto 443)
ufw allow 443/tcp > /dev/null 2>&1
log_success "Puerto 443 (HTTPS) permitido"

# ¬øQu√©? - Permitir puertos comunes de aplicaciones
log_info "¬øDeseas abrir puertos adicionales? (ej: 3000, 8080)"
log_info "Ingresa puertos separados por espacio, o Enter para omitir:"
read -r EXTRA_PORTS

if [ -n "$EXTRA_PORTS" ]; then
    for port in $EXTRA_PORTS; do
        ufw allow "$port"/tcp > /dev/null 2>&1
        log_success "Puerto $port permitido"
    done
fi

# ¬øQu√©? - Activar firewall
# ¬øPara qu√©? - Aplicar reglas de seguridad
log_info "Activando firewall..."
ufw --force enable > /dev/null 2>&1

log_success "Firewall configurado y activo"
echo ""

# ============================================================================
# 6. VERIFICACIONES FINALES
# ============================================================================
log_info "Paso 6/6: Verificando instalaci√≥n..."

# Verificar Docker
if docker ps > /dev/null 2>&1; then
    log_success "Docker funciona correctamente"
else
    log_error "Docker no est√° funcionando"
fi

# Verificar Docker Compose
if docker compose version > /dev/null 2>&1; then
    log_success "Docker Compose funciona correctamente"
else
    log_error "Docker Compose no est√° funcionando"
fi

# Verificar UFW
if ufw status | grep -q "Status: active"; then
    log_success "Firewall est√° activo"
else
    log_warning "Firewall no est√° activo"
fi

echo ""

# ============================================================================
# RESUMEN
# ============================================================================
echo "============================================"
echo "  ‚úÖ Configuraci√≥n Completada"
echo "============================================"
echo ""
echo "üìä Resumen de Recursos:"
echo "  ‚Ä¢ RAM disponible: $(free -h | awk '/^Mem:/ {print $4}')"
echo "  ‚Ä¢ Disco disponible: $(df -h / | awk 'NR==2 {print $4}')"
echo "  ‚Ä¢ Docker: $DOCKER_VERSION"
echo "  ‚Ä¢ Docker Compose: $COMPOSE_VERSION"
echo ""
echo "üî• Firewall (UFW):"
ufw status numbered | grep -E "^\[|^Status"
echo ""
echo "üìù Pr√≥ximos Pasos:"
echo "  1. Cierra sesi√≥n y vuelve a conectar:"
echo "     exit"
echo "     ssh $REAL_USER@\$(hostname -I | awk '{print \$1}')"
echo ""
echo "  2. Verifica que Docker funciona sin sudo:"
echo "     docker ps"
echo ""
echo "  3. Despliega tu primera aplicaci√≥n:"
echo "     docker compose up -d"
echo ""
echo "============================================"
echo ""

# Preguntar si reiniciar (si actualiz√≥ kernel)
if [ -f /var/run/reboot-required ]; then
    log_warning "Se requiere reinicio para aplicar todas las actualizaciones"
    log_info "¬øDeseas reiniciar ahora? (y/n)"
    read -r REBOOT
    
    if [ "$REBOOT" = "y" ]; then
        log_info "Reiniciando en 5 segundos..."
        sleep 5
        reboot
    else
        log_info "Recuerda reiniciar m√°s tarde: sudo reboot"
    fi
fi

log_success "¬°Configuraci√≥n exitosa! üöÄ"
echo ""

# ============================================================================
# FIN DEL SCRIPT
# ============================================================================
